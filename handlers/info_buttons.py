from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.misc import dispatcher as dp
from utils import kb
from utils.rate_limiter import OrderLimiter
from utils import db
import datetime
import json


class OrderForm(StatesGroup):
	title = State()
	description = State()
	price = State()
	tags = State()


class FeedbackForm(StatesGroup):
	price = State()
	description = State()
	deadline_days = State()


class TagFilterForm(StatesGroup):
	tags = State()


ITEMS_PER_PAGE = 5


@dp.callback_query_handler(lambda c: c.data == 'go::faq')
async def handle_faq(cb: CallbackQuery, state: FSMContext):
	await state.finish()
	msg = cb.message
	await msg.reply(
		'<b>‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n'
		'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sagittis tempor varius. '
		'Nulla lectus sapien, sollicitudin eget nisl et, faucibus cursus ante. Aliquam vitae eros efficitur, '
		'efficitur lectus placerat, dapibus dolor. Nulla —ç–ª–∏—Ç purus, ornare.',
		reply_markup=kb.back_main_menu,
		parse_mode='HTML'
	)
	await msg.delete()


# Existing callback query handler for `filter_orders`
@dp.callback_query_handler(lambda c: c.data == 'filter_orders')
async def filter_orders(cb: CallbackQuery, state: FSMContext):
	user_id = cb.from_user.id
	selected_tags = await db.get_user_selected_tags(user_id)
	await cb.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=kb.create_tags_keyboard(selected_tags))
	await TagFilterForm.tags.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('tag::'), state=TagFilterForm.tags)
async def process_tag_filter_selection(cb: CallbackQuery, state: FSMContext):
	user_id = cb.from_user.id
	tag = cb.data.split('::')[1]
	selected_tags = await db.get_user_selected_tags(user_id)

	if tag in selected_tags:
		selected_tags.remove(tag)
	else:
		selected_tags.append(tag)

	print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {selected_tags}")  # –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
	await db.update_user_selected_tags(user_id, selected_tags)
	await cb.message.edit_reply_markup(reply_markup=kb.create_tags_keyboard(selected_tags))


@dp.callback_query_handler(lambda c: c.data == 'tags_done', state=TagFilterForm.tags)
async def finalize_tag_filter(cb: CallbackQuery, state: FSMContext):
	user_id = cb.from_user.id
	selected_tags = await db.get_user_selected_tags(user_id)
	print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {selected_tags}")  # –õ–æ–≥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
	await cb.message.reply("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb.back_main_menu)

	# Perform search immediately after saving tags
	page = 1
	orders, total_orders = await db.get_all_orders_paginated_filtered(page, ITEMS_PER_PAGE, selected_tags)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await cb.message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.back_main_menu)
		await state.finish()
		return

	orders_text = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
	for order in orders:
		tags = json.loads(order.tags) if order.tags else []
		tags_text = ", ".join(tags)
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
		orders_text += f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_text}\n\n"

	await cb.message.reply(orders_text, reply_markup=kb.create_orders_keyboard(orders, page, total_pages), parse_mode='HTML')
	await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'go::rules')
async def handle_rules(cb: CallbackQuery, state: FSMContext):
	await state.finish()
	msg = cb.message
	await msg.reply(
		'<b>üìï –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n'
		'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sagittis tempor varius. '
		'Null–∞ lectus sapien, sollicitudin eget nisl et, faucibus cursus ante. Aliquam vitae eros efficitur, '
		'efficitur lectus placerat, dapibus dolor. Nulla —ç–ª–∏—Ç purus, ornare.',
		reply_markup=kb.back_main_menu,
		parse_mode='HTML'
	)
	await msg.delete()


@dp.callback_query_handler(lambda c: c.data == 'create_order', state='*')
async def new_order_callback(cb: CallbackQuery, state: FSMContext):
	msg = cb.message
	await state.finish()  # Clear previous state
	await OrderForm.title.set()
	await msg.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
	await msg.delete()


@dp.message_handler(state=OrderForm.title)
async def process_title(msg: Message, state: FSMContext):
	await state.update_data(title=msg.text)
	await OrderForm.next()
	await msg.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=OrderForm.description)
async def process_description(msg: Message, state: FSMContext):
	await state.update_data(description=msg.text)
	await OrderForm.next()
	await msg.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=OrderForm.price)
async def process_price(msg: Message, state: FSMContext):
	try:
		price = float(msg.text)
	except ValueError:
		await msg.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–Ω–æ–≤–∞:")
		return

	await state.update_data(price=price)
	await OrderForm.next()
	await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=kb.create_tags_keyboard([]))


@dp.callback_query_handler(lambda c: c.data.startswith('tag::'), state=OrderForm.tags)
async def process_tag_selection(cb: CallbackQuery, state: FSMContext):
	tag = cb.data.split('::')[1]
	data = await state.get_data()
	selected_tags = data.get('tags', [])

	if tag in selected_tags:
		selected_tags.remove(tag)
	else:
		selected_tags.append(tag)

	await state.update_data(tags=selected_tags)
	await cb.message.edit_reply_markup(reply_markup=kb.create_tags_keyboard(selected_tags))


@dp.callback_query_handler(lambda c: c.data == 'tags_done', state=OrderForm.tags)
async def save_order_with_tags(cb: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	user = await db.get_user(user_id=cb.from_user.id)
	performer_id = cb.from_user.id

	selected_tags = data.get('tags', [])

	if not selected_tags:
		await cb.message.reply("‚õî–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ç–µ–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞.", reply_markup=kb.create_tags_keyboard(selected_tags))
		return

	if await OrderLimiter.is_limited(user.id):
		await cb.message.reply("‚õî –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 45 –º–∏–Ω—É—Ç.")
		await state.finish()
		return

	await db.create_order(
		client_id=user.id,
		title=data['title'],
		description=data['description'],
		client_price=data['price'],
		performer_id=performer_id,
		tags=json.dumps(selected_tags)  # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É JSON
	)

	await cb.message.reply("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=kb.back_main_menu, parse_mode='HTML')
	await state.finish()
	await cb.message.delete()


# Updated `view_all_orders` to include tag filtering
# @dp.callback_query_handler(lambda c: c.data == 'view_all_orders' or c.data.startswith('page_'))
# async def view_all_orders(callback_query: CallbackQuery, state: FSMContext):
#     user_id = callback_query.from_user.id
#     msg = callback_query.message
#     if 'page_' in callback_query.data:
#         page = int(callback_query.data.split('_')[1])
#     else:
#         page = 1
#
#     selected_tags = await db.get_user_selected_tags(user_id)
#
#     orders, total_orders = await db.get_all_orders_paginated_filtered(page, ITEMS_PER_PAGE, selected_tags)
#     total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
#
#     if not orders:
#         await msg.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.back_main_menu)
#         await msg.delete()
#         return
#
#     orders_text = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
#     for order in orders:
#         orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
#         orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n\n"
#
#     await msg.reply(orders_text, reply_markup=kb.create_orders_keyboard(orders, page, total_pages), parse_mode='HTML')
#     await msg.delete()
@dp.callback_query_handler(lambda c: c.data == 'view_all_orders' or c.data.startswith('page_'))
async def view_all_orders(callback_query: CallbackQuery, state: FSMContext):
	user_id = callback_query.from_user.id
	msg = callback_query.message
	if 'page_' in callback_query.data:
		page = int(callback_query.data.split('_')[1])
	else:
		page = 1

	orders, total_orders = await db.get_all_orders_with_status_zero_paginated(page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await msg.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.back_main_menu)
		await msg.delete()
		return

	orders_text = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
	for order in orders:
		tags = json.loads(order.tags) if order.tags else []
		tags_text = ", ".join(tags)
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
		orders_text += f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_text}\n\n"

	await msg.reply(orders_text, reply_markup=kb.create_orders_keyboard(orders, page, total_pages), parse_mode='HTML')
	await msg.delete()


@dp.callback_query_handler(lambda c: c.data.startswith('raise_order_'))
async def raise_order(cb: CallbackQuery):
	order_id = cb.data.split('_')[2]
	user_id = cb.from_user.id

	order = await db.get_order_by_id(order_id)

	if not order:
		await cb.message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_main_menu)
		await cb.message.delete()
		return

	if order.client_id != user_id:
		await cb.message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã.", reply_markup=kb.back_main_menu)
		await cb.message.delete()
		return

	current_time = datetime.datetime.utcnow()
	if order.last_raised and (current_time - order.last_raised).total_seconds() < 3 * 3600:
		await cb.message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞.", reply_markup=kb.back_main_menu)
		await cb.message.delete()
		return

	await db.raise_order(order_id, current_time)
	await cb.message.reply("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç!", reply_markup=kb.back_main_menu)
	await cb.message.delete()


@dp.callback_query_handler(lambda c: c.data.startswith('accept_response_'))
async def accept_response(callback_query: CallbackQuery):
	feedback_id = callback_query.data.split('_')[-1]
	feedback = await db.get_feedback_by_id(feedback_id)
	if not feedback:
		await callback_query.message.reply("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	order = await db.get_order_by_id(feedback.order_id)
	if not order:
		await callback_query.message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	user_id = callback_query.from_user.id
	if order.client_id != user_id:
		await callback_query.message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã.",
											reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	if feedback.performer_id == user_id:
		await callback_query.message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤ –ø—Ä–∏–Ω—è—Ç—ã–µ
	await db.move_feedback_to_accepted(feedback_id)
	await db.update_order_status(order.id, 2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ "Working"

	# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑—á–∏–∫–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
	client = await db.get_user(user_id=order.client_id)
	performer = await db.get_user(user_id=feedback.performer_id)

	client_tag = f"@{client.username}" if client.username else client.full_name
	performer_tag = f"@{performer.username}" if performer.username else performer.full_name

	# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	await dp.bot.send_message(client.id, f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–∫–ª–∏–∫ –æ—Ç {performer_tag} –Ω–∞ –∑–∞–∫–∞–∑ {order.title}.")
	await dp.bot.send_message(performer.id,
							  f"–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ {order.title} –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞: {client_tag}")

	await callback_query.message.reply("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–∫–ª–∏–∫. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
									   reply_markup=kb.back_to_orders)
	await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'user_orders')  # –∏–ª–∏ c.data.startswith('user_orders_page_'))
async def view_user_orders(callback_query: CallbackQuery):
	user_id = callback_query.from_user.id

	if 'user_orders_page_' in callback_query.data:
		page = int(callback_query.data.split('_')[-1])
	else:
		page = 1

	orders, total_orders = await db.get_orders_by_user_paginated(user_id, page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.create_profile_keyboard())
		return

	orders_text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += (
			f"üÜî <b>ID:</b> {order.id}\n"
			f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
			f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
			f"üîç <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
			f"üì• <a href='view_responses_{order.id}'>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏</a>\n\n"
		)

	await callback_query.message.reply(orders_text, reply_markup=kb.create_user_orders_keyboard(
		orders, page, total_pages), parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data == 'raise_order')
async def show_user_orders(cb: CallbackQuery):
	user_id = cb.from_user.id
	orders = await db.get_orders_by_user(user_id)

	if not orders:
		await cb.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è.", reply_markup=kb.back_main_menu)
		return

	orders_text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += f"üÜî <b>ID:</b> {order.id}\n"
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n\n"

	await cb.message.reply(orders_text, reply_markup=create_raise_orders_keyboard(orders), parse_mode='HTML')
	await cb.message.delete()


def create_raise_orders_keyboard(orders):
	keyboard = InlineKeyboardMarkup(row_width=1)
	for order in orders:
		keyboard.add(InlineKeyboardButton(f"–ü–æ–¥–Ω—è—Ç—å {order.title}", callback_data=f"raise_order_{order.id}"))
	keyboard.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to::main_menu'))
	return keyboard


@dp.callback_query_handler(lambda c: c.data.startswith('select_order_'))
async def select_order(callback_query: CallbackQuery):
	order_id = callback_query.data.split('_')[-1]
	order = await db.get_order_by_id(order_id)
	if not order:
		await callback_query.message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	user_id = callback_query.from_user.id
	user = await db.get_user(user_id=user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	is_own_order = (order.client_id == user_id)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
	favorite_orders = await db.get_favorite_orders(user_id)
	is_favorite = any(fav_order.id == order_id for fav_order in favorite_orders)

	order_text = (
		f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
		f"üÜî <b>ID:</b> {order.id}\n"
		f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n"
		f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
		f"üîç <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
	)

	reply_markup = InlineKeyboardMarkup(row_width=1)
	if user.role == 'performer' and not is_own_order:
		reply_markup.add(InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f'respond_order_{order.id}'))

	# Adding the remaining buttons
	reply_markup.inline_keyboard.extend(kb.create_order_details_keyboard(order.id, is_own_order=is_own_order, is_favorite=is_favorite).inline_keyboard)

	await callback_query.message.reply(order_text, reply_markup=reply_markup, parse_mode='HTML')
	await callback_query.message.delete()



@dp.callback_query_handler(lambda c: c.data.startswith('respond_order_'))
async def respond_order(callback_query: CallbackQuery):
	order_id = callback_query.data.split('_')[-1]
	performer_id = callback_query.from_user.id
	'''—ç—Ç–∞ —Ö—É–π–Ω—è —Å—Ç—Ä–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—á–µ–∫–∞–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'''

	order = await db.get_order_by_id(order_id)

	if order.client_id == performer_id:
		await callback_query.message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.",
										   reply_markup=kb.back_main_menu)
		await callback_query.message.delete()
		return

	await FeedbackForm.price.set()
	state = dp.current_state(user=performer_id)
	async with state.proxy() as data:
		data['order_id'] = order_id
		data['performer_id'] = performer_id

	await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
	await callback_query.message.delete()


@dp.message_handler(state=FeedbackForm.price)
async def process_feedback_price(message: Message, state: FSMContext):
	try:
		price = float(message.text)
	except ValueError:
		await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–Ω–æ–≤–∞:")
		return

	async with state.proxy() as data:
		order_id = data['order_id']
		order = await db.get_order_by_id(order_id)
		client_price = order.client_price

		min_price = client_price * 0.8
		max_price = client_price * 1.2

		if price < min_price or price > max_price:
			await message.reply(f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {min_price:.2f} –¥–æ {max_price:.2f} —Ä—É–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–Ω–æ–≤–∞:")
			return

		data['price'] = price

	await FeedbackForm.next()
	await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:")



@dp.message_handler(state=FeedbackForm.description)
async def process_feedback_description(message: Message, state: FSMContext):
	description = message.text
	async with state.proxy() as data:
		data['description'] = description

	await FeedbackForm.next()
	await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=FeedbackForm.deadline_days)
async def process_feedback_deadline_days(message: Message, state: FSMContext):
	try:
		deadline_days = int(message.text)
	except ValueError:
		await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
		return

	async with state.proxy() as data:
		data['deadline_days'] = deadline_days

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫
		await db.create_feedback(
			order_id=data['order_id'],
			performer_id=data['performer_id'],
			price=data['price'],
			description=data['description'],
			deadline_days=data['deadline_days']
		)

	# –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	order = await db.get_order_by_id(data['order_id'])
	customer = await db.get_user(user_id=order.client_id)
	performer = await db.get_user(user_id=data['performer_id'])

	await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑.", reply_markup=kb.back_main_menu)
	await state.finish()

	await dp.bot.send_message(customer.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer.full_name}"
										   f" –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ {order.title} —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º {data['price']} $"
										   f". –∏ —Å—Ä–æ–∫–æ–º {data['deadline_days']} –¥–Ω–µ–π.")


@dp.callback_query_handler(lambda c: c.data == 'back_to::orders')
async def back_to_orders(cb: CallbackQuery):
	user_id = cb.from_user.id
	page = 1

	orders, total_orders = await db.get_orders_by_user_paginated(user_id, page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await cb.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.create_profile_keyboard())
		return

	orders_text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += f"üÜî <b>ID:</b> {order.id}\n"
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
		orders_text += f"üîç <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
		orders_text += f"üì• <b><a href='view_responses_{order.id}'>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏</a></b>\n\n"

	await cb.message.reply(orders_text, reply_markup=kb.create_user_orders_keyboard(
		orders, page, total_pages), parse_mode='HTML')
	await cb.message.delete()

@dp.callback_query_handler(lambda c: c.data == 'view_favorite_orders' or c.data.startswith('favorite_orders_page_'))
async def view_favorite_orders(callback_query: CallbackQuery):
	user_id = callback_query.from_user.id
	if 'favorite_orders_page_' in callback_query.data:
		page = int(callback_query.data.split('_')[-1])
	else:
		page = 1

	orders, total_orders = await db.get_favorite_orders_paginated(user_id, page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.back_main_menu)
		await callback_query.message.delete()
		return

	orders_text = "<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += f"üÜî <b>ID:</b> {order.id}\n"
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n\n"

	await callback_query.message.reply(
		orders_text,
		reply_markup=kb.create_favorite_orders_keyboard(orders, page, total_pages),
		parse_mode='HTML'
	)
	await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'go::profile')
async def handle_profile(cb: CallbackQuery):
	user_id = cb.from_user.id
	user = await db.get_user(user_id=user_id)
	if not user:
		await cb.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_main_menu)
		return

	# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	orders, total_orders = await db.get_orders_by_user_paginated(user_id, 1, 1)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
	profile_text = (
		f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
		f"üë§ <b>–ò–º—è:</b> {user.full_name}\n"
		f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
		f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance} —Ä—É–±.\n"
		f"üìã <b>–ó–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã:</b> {total_orders}\n"
		f"‚úÖ <b>–ó–∞–∫–∞–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:</b> {user.orders_completed}\n"
	)

	await cb.message.reply(profile_text, reply_markup=kb.create_profile_keyboard(), parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('view_responses_'))
async def view_responses(callback_query: CallbackQuery):
	user_id = callback_query.from_user.id
	order_id = callback_query.data.split('_')[-1]
	order = await db.get_order_by_id(order_id)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–∫–∞–∑–∞
	if order.client_id != user_id:
		await callback_query.message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã.", reply_markup=kb.back_main_menu)
		await callback_query.message.delete()
		return

	feedbacks = await db.get_feedbacks_by_order(order_id)
	if not feedbacks:
		await callback_query.message.reply("–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	responses_text = "<b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑:</b>\n\n"
	for feedback in feedbacks:
		performer = await db.get_user(user_id=feedback.performer_id)
		responses_text += (
			f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {performer.full_name}\n"
			f"üíµ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</b> {feedback.price} —Ä—É–±.\n"
			f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {feedback.description}\n"
			f"üìÖ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {feedback.deadline_days} –¥–Ω–µ–π\n"
			f"üÜî <b>ID –æ—Ç–∫–ª–∏–∫–∞:</b> {feedback.id}\n\n"
		)

	await callback_query.message.reply(responses_text, reply_markup=kb.create_responses_keyboard(order_id, feedbacks),
									   parse_mode='HTML')
	await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data.startswith('user_orders_page_'))
async def view_user_orders_page(callback_query: CallbackQuery):
	user_id = callback_query.from_user.id
	page = int(callback_query.data.split('_')[-1])

	orders, total_orders = await db.get_orders_by_user_paginated(user_id, page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.create_profile_keyboard())
		return

	orders_text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += (
			f"üÜî <b>ID:</b> {order.id}\n"
			f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
			f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n"
			f"üîç <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
			f"üì• <a href='view_responses_{order.id}'>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏</a>\n\n"
		)

	await callback_query.message.edit_text(
		orders_text,
		reply_markup=kb.create_user_orders_keyboard(orders, page, total_pages),
		parse_mode='HTML'
	)

@dp.callback_query_handler(lambda c: c.data.startswith('reject_response_'))
async def reject_response(callback_query: CallbackQuery):
	feedback_id = callback_query.data.split('_')[-1]
	feedback = await db.get_feedback_by_id(feedback_id)
	if not feedback:
		await callback_query.message.reply("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_main_menu)
		await callback_query.message.delete()
		return

	# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
	await db.move_feedback_to_declined(feedback_id)
	await callback_query.message.reply("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ—Ç–∫–ª–∏–∫.", reply_markup=InlineKeyboardMarkup().add(
		InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='back_to::profile')
	))
	await callback_query.message.delete()

	performer = await db.get_user(user_id=feedback.performer_id)
	await dp.bot.send_message(performer.id, f"–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ {feedback.description} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")


@dp.callback_query_handler(lambda c: c.data.startswith('add_to_favorites_'))
async def add_to_favorites(callback_query: CallbackQuery):
	order_id = callback_query.data.split('_')[-1]
	user_id = callback_query.from_user.id

	favorites = await db.get_favorite_orders(user_id)
	favorite_order_ids = {order.id for order in favorites}

	if order_id in favorite_order_ids:
		await db.remove_from_favorites(user_id, order_id)
		await callback_query.message.reply("–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", reply_markup=kb.back_to_orders)
	else:
		await db.add_to_favorites(user_id, order_id)
		await callback_query.message.reply("–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", reply_markup=kb.back_to_orders)

	await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'view_favorite_orders')#  or c.data.startswith('favorite_orders_page_'))
async def view_favorite_orders_(callback_query: CallbackQuery):
	user_id = callback_query.from_user.id
	if 'favorite_orders_page_' in callback_query.data:
		page = int(callback_query.data.split('_')[-1])
	else:
		page = 1

	orders, total_orders = await db.get_favorite_orders_paginated(user_id, page, ITEMS_PER_PAGE)
	total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

	if not orders:
		await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb.back_main_menu)
		await callback_query.message.delete()
		return

	orders_text = "<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
	for order in orders:
		orders_text += f"üÜî <b>ID:</b> {order.id}\n"
		orders_text += f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
		orders_text += f"üíµ <b>–¶–µ–Ω–∞:</b> {order.client_price} —Ä—É–±.\n\n"

	await callback_query.message.reply(
		orders_text,
		reply_markup=kb.create_favorite_orders_keyboard(orders, page, total_pages),
		parse_mode='HTML'
	)
	await callback_query.message.delete()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_order_'))
async def edit_order(callback_query: CallbackQuery):
	order_id = callback_query.data.split('_')[-1]
	order = await db.get_order_by_id(order_id)
	if not order:
		await callback_query.message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	await OrderForm.title.set()
	state = dp.current_state(user=callback_query.from_user.id)
	async with state.proxy() as data:
		data['order_id'] = order_id

	await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞:")
	await callback_query.message.delete()


@dp.message_handler(state=OrderForm.title)
async def process_edit_title(msg: Message, state: FSMContext):
	await state.update_data(title=msg.text)
	await OrderForm.next()
	await msg.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=OrderForm.description)
async def process_edit_description(msg: Message, state: FSMContext):
	await state.update_data(description=msg.text)
	await OrderForm.next()
	await msg.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=OrderForm.price)
async def process_edit_price(msg: Message, state: FSMContext):
	try:
		price = float(msg.text)
	except ValueError:
		await msg.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å–Ω–æ–≤–∞:")
		return

	async with state.proxy() as data:
		order_id = data['order_id']
		await db.update_order(order_id, title=data['title'], description=data['description'], client_price=price)

	await msg.reply("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=kb.back_to_orders)
	await state.finish()
	await msg.delete()


@dp.callback_query_handler(lambda c: c.data.startswith('delete_order_'))
async def delete_order(callback_query: CallbackQuery):
	order_id = callback_query.data.split('_')[-1]
	user_id = callback_query.from_user.id

	order = await db.get_order_by_id(order_id)
	if not order:
		await callback_query.message.reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	if order.client_id != user_id:
		await callback_query.message.reply("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã.", reply_markup=kb.back_to_orders)
		await callback_query.message.delete()
		return

	await db.delete_order(order_id, user_id)
	await callback_query.message.reply("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=kb.back_to_orders)
	await callback_query.message.delete()



@dp.callback_query_handler(lambda c: c.data == 'back_to::profile')
async def back_to_profile(cb: CallbackQuery):
	await handle_profile(cb)
